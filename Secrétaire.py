import discord
from discord import app_commands, Interaction, ui
from discord.ext import commands
import requests
import re
import asyncio
from collections import Counter
import sqlite3
import os
import random
from discord.ui import Button, View
import time 
import json
# Ton token Discord
TOKEN = os.getenv('BOT_TOKEN')

# === Mini serveur Flask juste pour Render ===
app = Flask('')

@app.route('/')
def home():
    return "Le bot est en ligne !"

def run():
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))

def keep_alive():
    t = Thread(target=run)
    t.start()


# Config du bot
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)


tree = bot.tree
# Connexion √† la base de donn√©es SQLite (cr√©ation du fichier si n√©cessaire)
DATABASE = "data.db"

# Connexion √† la base de donn√©es
def get_db():
    return sqlite3.connect(DATABASE)

# Fonction pour r√©cup√©rer les donn√©es utilisateur
def get_user_data(user_id):
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT metier, argent, dernier_travail FROM utilisateurs WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            return {
                "metier": row[0],
                "argent": row[1],
                "dernier_travail": row[2]
            }
        return None

# Fonction pour sauvegarder les donn√©es utilisateur
def save_user(user_id, metier, argent, dernier_travail):
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO utilisateurs (user_id, metier, argent, dernier_travail)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
            metier=excluded.metier,
            argent=excluded.argent,
            dernier_travail=excluded.dernier_travail
        """, (user_id, metier, argent, dernier_travail))
        conn.commit()

# Cr√©ation de la table dans la base de donn√©es
def create_table():
    with get_db() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS utilisateurs (
                user_id TEXT PRIMARY KEY,
                metier TEXT,
                argent INTEGER,
                dernier_travail REAL
            )
        """)
        conn.commit()

create_table()

# D√©finition des m√©tiers et des gains
metiers = {
    "developer": {
        "description": "D√©veloppeur, tu codes des applis.",
        "temps_par_tache": 1800,  # secondes d'attente entre chaque t√¢che
        "gain": 250
    },
    "designer": {
        "description": "Designer, tu cr√©es des visuels.",
        "temps_par_tache": 2700, # de base c 150     # la c 45 min
        "gain": 400  # R√©compense pour avoir termin√© le jeu
    },
    "Chercheur": {
        "description": "Chercheur, tu r√©sous des √©nigmes scientifiques complexes.",
        "temps_par_tache": 3600, # 1 heur
        "gain": 500
    },
    "Investisseur": {
        "description": "Investisseur, tu prends des risques pour gagner plus.",
        "temps_par_tache": 1800, # 30 min
        "gain": "variable"
    }
}









# R√¥le n√©cessaire pour choisir le m√©tier "Investisseur"
required_role = "Investisseur"  # Nom du r√¥le n√©cessaire

# === Embed des m√©tiers avec Select ===
class MetierSelect(ui.Select):
    def __init__(self, user_roles):
        options = [
            discord.SelectOption(label=metier.capitalize(), description=metiers[metier]["description"], value=metier)
            for metier in metiers
        ]
        
        # Si l'utilisateur n'a pas le r√¥le "Investisseur", on retire ce m√©tier de la liste
        if required_role not in [role.name for role in user_roles]:
            options = [option for option in options if option.value != "Investisseur"]

        super().__init__(placeholder="Choisis ton m√©tier", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: Interaction):
        selected_metier = self.values[0]  # Le m√©tier s√©lectionn√© par l'utilisateur
        user_id = str(interaction.user.id)

        # Validation que le m√©tier existe
        if selected_metier not in metiers:
            await interaction.response.send_message(f"‚ùå Le m√©tier `{selected_metier}` n'existe pas.", ephemeral=True)
            return

        # Enregistrer le m√©tier de l'utilisateur dans la base de donn√©es SQLite
        save_user(user_id, selected_metier, 0, time.time())

        # Envoi d'un message de confirmation avec un embed
        embed = discord.Embed(
            title=f"Tu es maintenant **{selected_metier.capitalize()}** !",
            description=metiers[selected_metier]["description"],
            color=discord.Color.green()
        )
        embed.add_field(name="Temps entre chaque t√¢che", value=f"{metiers[selected_metier]['temps_par_tache']} secondes")
        await interaction.response.send_message(embed=embed, ephemeral=True)

# Commande /choisir_metier
@bot.tree.command(name="choisir_metier", description="Choisis un m√©tier parmi les options disponibles")
async def choisir_metier(interaction: Interaction):
    # V√©rification des r√¥les de l'utilisateur
    user_roles = interaction.user.roles
    
    # Filtrage des m√©tiers pour l'embed
    metiers_affichables = metiers.copy()

    # Si l'utilisateur n'a pas le r√¥le "Investisseur", on retire ce m√©tier de la liste
    if required_role not in [role.name for role in user_roles]:
        metiers_affichables.pop("Investisseur", None)

    # Cr√©ation de l'embed avec la liste des m√©tiers filtr√©e
    embed = discord.Embed(
        title="Choisis ton m√©tier",
        description="S√©lectionne un m√©tier ci-dessous pour d√©marrer.",
        color=discord.Color.blue()
    )
    embed.add_field(name="M√©tiers disponibles", value="\n".join([f"**{metier.capitalize()}** - {metiers_affichables[metier]['description']}" for metier in metiers_affichables]), inline=False)

    # Cr√©ation du Select (menu d√©roulant) avec la liste filtr√©e des m√©tiers
    select = MetierSelect(user_roles)

    # Cr√©ation de la vue et ajout du Select
    view = ui.View()
    view.add_item(select)

    # Envoi du message avec l'embed et le Select
    await interaction.response.send_message(embed=embed, view=view, ephemeral=False)






import requests

async def attribuer_recompense(interaction, metier):
    try:
        # V√©rifier que le m√©tier existe
        if metier not in metiers:
            await interaction.followup.send("‚ùå M√©tier inconnu. Impossible d‚Äôattribuer la r√©compense.", ephemeral=True)
            return

        # R√©cup√©rer le gain du m√©tier
        gain = metiers[metier]["gain"]

        # G√©rer les cas particuliers
        if gain == "variable":
            gain = random.randint(100, 600)  # ou ta logique personnalis√©e

        # Construire l'URL pour l'API UnbelievaBoat
        url = f"https://unbelievaboat.com/api/v1/guilds/{interaction.guild.id}/users/{interaction.user.id}"

        payload = {
            "cash": gain,
            "reason": f"R√©compense pour avoir travaill√© comme {metier.capitalize()}"
        }

        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            "authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfaWQiOiIxMzU4MDEwNTg0MDA3ODM4NDIzIiwiaWF0IjoxNzQzODQ1MzUzfQ.MVyA4OU4bgetYIB-T1aCajjJgEI2YTrcnV7owX38BlU"
        }

        # Appel √† l'API
        response = requests.patch(url, json=payload, headers=headers)

        if response.status_code == 200:
            await interaction.followup.send(f"üí∞ Tu as gagn√© **{gain}$** en tant que **{metier}** !", ephemeral=True)
        else:
            await interaction.followup.send("‚ùå Une erreur est survenue lors de l'attribution de ta r√©compense.", ephemeral=True)
            print(f"[ERREUR API] {response.status_code} - {response.text}")

    except Exception as e:
        print(f"[ERREUR] Impossible d'attribuer la r√©compense : {e}")
        await interaction.followup.send("‚ùå Une erreur est survenue.", ephemeral=True)


# Fonction appel√©e uniquement lorsqu'il y a une perte d'argent
async def gestion_perte(interaction, perte):
    try:
        # Annoncer la perte √† l'utilisateur
        await interaction.followup.send(f"üìâ Tu as perdu **{perte} pi√®ces**. Sois plus prudent la prochaine fois !", ephemeral=True)

        # Construire l'URL pour l'API UnbelievaBoat pour mettre √† jour le solde en n√©gatif
        url = f"https://unbelievaboat.com/api/v1/guilds/{interaction.guild.id}/users/{interaction.user.id}"

        # D√©finir le payload pour retirer l'argent
        payload = {
            "cash": -perte,  # Retirer la somme (donc la mettre en n√©gatif)
            "reason": f"Perte d'argent suite √† un investissement dans le jeu."
        }

        # D√©finir les en-t√™tes n√©cessaires pour l'API
        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            "authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfaWQiOiIxMzU4MDEwNTg0MDA3ODM4NDIzIiwiaWF0IjoxNzQzODQ1MzUzfQ.MVyA4OU4bgetYIB-T1aCajjJgEI2YTrcnV7owX38BlU"
        }

        # Appel √† l'API UnbelievaBoat
        response = requests.patch(url, json=payload, headers=headers)

#        if response.status_code == 200:
 #           print(f"üí∏ {perte} pi√®ces ont √©t√© retir√©es de l'utilisateur {interaction.user.name} sur UnbelievaBoat.")
  #      else:
   #         print(f"[ERREUR API] {response.status_code} - {response.text}")
    #        await interaction.followup.send("‚ùå Une erreur est survenue lors de la mise √† jour de ton solde d'argent.", ephemeral=True)

    except Exception as e:
        print(f"[ERREUR] Impossible de g√©rer la perte : {e}")
        await interaction.followup.send("‚ùå Une erreur est survenue lors du traitement de la perte.", ephemeral=True)














# Commande de travail
@bot.tree.command(name="travailler", description="Effectuer une t√¢che li√©e √† ton m√©tier.")
async def travailler(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    user_data = get_user_data(user_id)

    if not user_data or not user_data["metier"]:
        await interaction.response.send_message("‚ùå Tu n'as pas encore choisi de m√©tier.", ephemeral=True)
        return

    metier = user_data["metier"]
    argent = user_data["argent"]
    dernier_travail = user_data["dernier_travail"]
    maintenant = time.time()




    # === MINI-JEU DU D√âVELOPPEUR ===
    if metier == "developer":
        nombre_secret = random.randint(1, 100)
        essais_max = 7

        await interaction.response.send_message(f"üíª Devine un nombre entre 1 et 100 ! Tu as {essais_max} tentatives.", ephemeral=False)

        def check(m):
            return m.author == interaction.user and m.channel == interaction.channel and m.content.isdigit()

        async def victoire():
            await attribuer_recompense(interaction, "developer")
            save_user(user_id, metier, argent, time.time())

        reussi = False
        for _ in range(essais_max):
            try:
                msg = await bot.wait_for("message", timeout=30.0, check=check)
                guess = int(msg.content)

                if guess == nombre_secret:
                    await interaction.followup.send("üéâ Bravo, tu as trouv√© le bon nombre !", ephemeral=False)
                    reussi = True
                    await victoire()
                    break
                elif guess < nombre_secret:
                    await interaction.followup.send("üîº C'est plus grand.", ephemeral=True)
                else:
                    await interaction.followup.send("üîΩ C'est plus petit.", ephemeral=True)
            except asyncio.TimeoutError:
                await interaction.followup.send("‚è±Ô∏è Temps √©coul√© !", ephemeral=True)
                break


        if reussi:
            argent += metiers[metier]["gain"]
            save_user(user_id, metier, argent, time.time())  # Sauvegarde avec le temps actuel
#            await interaction.followup.send(f"üí∏ Tu gagnes {metiers[metier]['gain']} pi√®ces !", ephemeral=True)
        else:
            await interaction.followup.send("‚ùå Tu n'as pas r√©ussi cette t√¢che.", ephemeral=True)


    elif metier == "designer":
        # R√©cup√©rer le temps d'attente sp√©cifique au m√©tier
        temps_attente = metiers[metier]["temps_par_tache"]

        # V√©rification du cooldown pour le designer
        if dernier_travail and isinstance(dernier_travail, (float, int)):
            delta = maintenant - dernier_travail  # Calcul du temps √©coul√© depuis le dernier travail
            if delta < temps_attente:
                temps_restant = int(temps_attente - delta)  # Temps restant avant de pouvoir retravailler
                await interaction.response.send_message(
                    f"‚è≥ Tu dois attendre encore {temps_restant} secondes avant de retravailler.",
                    ephemeral=True
                )
                return  # Retour si le joueur ne peut pas retravailler encore

        # Si l'utilisateur peut jouer, d√©marrer le jeu
        async def victoire():
            await attribuer_recompense(interaction, "designer")  # Attribue la r√©compense
            save_user(user_id, metier, argent, time.time())  # Sauvegarde les infos de l'utilisateur

        game_view = MemoryGame(interaction, on_win=victoire)  # Lancer le mini-jeu
        await interaction.response.send_message(
            "üé® Jeu de m√©moire ! Retourne les cartes et trouve les paires.",
            view=game_view
        )







    # Jeu pour le m√©tier Chercheur
    elif metier == "Chercheur":
        async def gagner():
            nonlocal argent
            argent += metiers[metier]["gain"]
            save_user(user_id, metier, argent, time.time())
            await interaction.followup.send(f"üí∏ Tu gagnes {metiers[metier]['gain']} pi√®ces !", ephemeral=True)

        embed = discord.Embed(
            title="üî¨ Mission du Chercheur",
            description="R√©sous les 5 √©nigmes scientifiques pour terminer ta mission.",
            color=discord.Color.blue()
        )

        # Ici, tu passes `interaction` et `metier` √† la classe ScientistGame
        view = ScientistGame(interaction, metier)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=False)





    # üíº Investisseur
    if metier == "Investisseur":
        async def gagner(gain):
            nonlocal argent
            argent += gain
            save_user(user_id, metier, argent, time.time())
#            if gain >= 0:
#                await interaction.followup.send(f"üìà Tu gagnes {gain} pi√®ces !", ephemeral=True)
#            else:
#                await interaction.followup.send(f"üìâ Tu perds {-gain} pi√®ces...", ephemeral=True)
        
        embed = discord.Embed(
            title="üìä Opportunit√© d'investissement",
            description="Fais un choix strat√©gique parmi les investissements disponibles.",
            color=discord.Color.gold()
        )

        view = InvestorGame(interaction, gagner)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=False)




save_user



class MemoryGame(View):
    def __init__(self, interaction: discord.Interaction, on_win=None):
        super().__init__(timeout=60)
        self.interaction = interaction
        self.cards = self.create_cards()
        self.flipped = []
        self.matched = []
        self.buttons = []
        self.on_win = on_win  # Fonction √† appeler √† la victoire

        for i in range(len(self.cards)):
            button = Button(label="‚ùì", style=discord.ButtonStyle.primary, custom_id=f"card_{i}")
            button.callback = self.make_callback(i)
            self.add_item(button)
            self.buttons.append(button)

    def create_cards(self):
        values = ["A", "B", "C", "D", "E"] * 2  # 5 paires
        random.shuffle(values)
        return values

    def make_callback(self, index):
        async def callback(interaction: discord.Interaction):
            if len(self.flipped) >= 2 or index in self.matched or index in self.flipped:
                await interaction.response.defer()
                return

            self.flipped.append(index)
            self.buttons[index].label = self.cards[index]
            await interaction.response.edit_message(view=self)

            if len(self.flipped) == 2:
                await asyncio.sleep(1)
                i1, i2 = self.flipped
                if self.cards[i1] == self.cards[i2]:
                    self.buttons[i1].style = discord.ButtonStyle.success
                    self.buttons[i2].style = discord.ButtonStyle.success
                    self.buttons[i1].disabled = True
                    self.buttons[i2].disabled = True
                    self.matched.extend([i1, i2])
                else:
                    self.buttons[i1].label = "‚ùì"
                    self.buttons[i2].label = "‚ùì"
                self.flipped.clear()
                await interaction.edit_original_response(view=self)

                # V√©rifie si toutes les paires ont √©t√© trouv√©es
                if len(self.matched) == len(self.cards):
                    await interaction.followup.send(f"üéâ Toutes les paires ont √©t√© trouv√©es !", ephemeral=False)
                    
                    # Appeler la fonction on_win (r√©compense) si elle est d√©finie
                    if self.on_win:
                        await self.on_win()

        return callback








class ScientistGame(View):
    def __init__(self, interaction: discord.Interaction, metier: str):
        super().__init__(timeout=120)
        self.interaction = interaction
        self.metier = metier
        self.correct_answers = 0
        self.answered = [False] * 5
        self.answers = {}

        # Banque de questions niveau 3e
        math_questions = [
            ("Quel est le discriminant de l'√©quation x¬≤ - 4x + 3 ?", "4"),
            ("Combien de solutions r√©elles pour l'√©quation x¬≤ + 2x + 5 ?", "0"),
            ("R√©sous : 3(x - 2) = 2x + 4", "10"),
            ("Si f(x) = 2x + 3, que vaut f(4) ?", "11"),
            ("Quelle est la d√©riv√©e de f(x) = x¬≤ ?", "2x"),
            ("Simplifie : (3x¬≤ + 2x - 1) - (x¬≤ - x + 4)", "2x¬≤+3x-5")
        ]

        chimie_questions = [
            ("Quel est le symbole chimique du sodium ?", "Na"),
            ("Combien de protons poss√®de un atome de carbone ?", "6"),
            ("Quelle est la formule de l‚Äôeau ?", "H2O"),
            ("Quel est le pH d‚Äôune solution neutre ?", "7"),
            ("Quel gaz est lib√©r√© lors de la respiration cellulaire ?", "CO2")
        ]

        # S√©lection 60% maths, 40% chimie (pour 5 questions)
        total_questions = 5
        math_count = round(total_questions * 0.6)
        chimie_count = total_questions - math_count

        selected_math = random.sample(math_questions, math_count)
        selected_chem = random.sample(chimie_questions, chimie_count)

        self.questions = selected_math + selected_chem
        random.shuffle(self.questions)

        # Cr√©ation des 5 boutons
        for i in range(total_questions):
            label = f"√ânigme {i+1}"
            button = Button(label=label, style=discord.ButtonStyle.secondary, custom_id=f"puzzle_{i}")
            button.callback = self.make_callback(i)
            self.add_item(button)
            self.answers[i] = self.questions[i][1].lower()

    def make_callback(self, idx):
        async def callback(interaction: discord.Interaction):
            # V√©rifier que la personne qui clique sur le bouton est l'utilisateur d'origine
            if interaction.user.id != self.interaction.user.id:
                await interaction.response.send_message("‚ùå Ce n'est pas √† vous de r√©pondre !", ephemeral=True)
                return

            if self.answered[idx]:
                return

            question, _ = self.questions[idx]

            await interaction.response.send_message(f"üîç **{question}**\nR√©ponds avec ta r√©ponse :", ephemeral=True)

            def check(m):
                return m.author == interaction.user and m.channel == interaction.channel

            try:
                msg = await interaction.client.wait_for("message", timeout=30.0, check=check)
                user_answer = msg.content.strip().lower()

                if user_answer == self.answers[idx]:
                    self.children[idx].style = discord.ButtonStyle.success
                    self.answered[idx] = True
                    self.correct_answers += 1
                    self.children[idx].disabled = True

                    await interaction.message.edit(view=self)
                    await interaction.followup.send("‚úÖ Bonne r√©ponse !", ephemeral=True)

                    if self.correct_answers == 5:
                        await interaction.followup.send("üéâ Tu as r√©ussi toutes les √©nigmes ! Tu gagnes ta r√©compense !", ephemeral=True)
                        await attribuer_recompense(interaction, self.metier)

                else:
                    await interaction.followup.send("‚ùå Mauvaise r√©ponse. Essaie une autre √©nigme.", ephemeral=True)

            except asyncio.TimeoutError:
                await interaction.followup.send("‚è±Ô∏è Temps √©coul√© pour cette √©nigme.", ephemeral=True)

        return callback







class InvestorGame(View):
    def __init__(self, interaction: discord.Interaction, gagner_callback):
        super().__init__(timeout=60)
        self.interaction = interaction
        self.gagner_callback = gagner_callback

        # G√©n√©rer les investissements
        self.investissements = self.generer_investissements()

        # Cr√©ation des boutons pour chaque investissement
        for idx, (nom, gain) in enumerate(self.investissements):
            bouton = Button(
                label=nom,
                style=discord.ButtonStyle.secondary,
                custom_id=f"invest_{idx}"
            )
            bouton.callback = self.make_callback(gain)
            self.add_item(bouton)

    def generer_investissements(self):
        # Options d'investissements avec des gains et pertes al√©atoires
        options = [
            ("Crypto-monnaie", random.randint(-100, 150)),
            ("Immobilier", random.randint(30, 70)),
            ("Start-up", random.randint(-50, 100)),
            ("Actions en bourse", random.randint(-80, 120)),
            ("Or et m√©taux pr√©cieux", random.randint(20, 60)),
            ("NFTs", random.randint(-100, 80)),
            ("Technologie verte", random.randint(-20, 90)),
            ("Pharmaceutique", random.randint(10, 60)),
        ]
        return random.sample(options, 5)

    def make_callback(self, gain):
        async def callback(interaction: discord.Interaction):
            # D√©sactiver les boutons
            for item in self.children:
                item.disabled = True
            await interaction.response.edit_message(view=self)

            # Appeler la fonction gagnant
            await self.gagner_callback(gain)

            # G√©rer perte ou r√©compense
            if gain < 0:
                await gestion_perte(interaction, -gain)
            else:
                # ‚úÖ Ici on utilise la fonction personnalis√©e avec le vrai gain
                await attribuer_recompense_personnalisee(interaction, "Investisseur", gain)
        return callback


# Wrapper pour g√©rer les gains personnalis√©s de l'investisseur
async def attribuer_recompense_personnalisee(interaction, metier, gain=None):
    if metier == "Investisseur" and gain is not None:
        # Injecte temporairement le gain dynamique dans le dictionnaire
        metiers["Investisseur"]["gain"] = gain
    await attribuer_recompense(interaction, metier)













def extract_id_from_mention(mention: str) -> str:
    """ Extrait l'ID d'une mention Discord """
    match = re.match(r"<@!?(\d+)>", mention)  # Utilise une regex pour extraire l'ID
    if match:
        return match.group(1)  # Retourne l'ID trouv√©
    return None  # Si aucun ID n'est trouv√©





@bot.tree.command(name="sim", description="Simule un vol avec une probabilit√© d'√©chec et un gain estim√©")
async def simulateur_vol(interaction: discord.Interaction, cible_mention: str, initiator_mention: str):
    # Extraire les ID des mentions
    cible_id = extract_id_from_mention(cible_mention)
    initiator_id = extract_id_from_mention(initiator_mention)

    if not cible_id or not initiator_id:
        await interaction.response.send_message("Erreur : Veuillez utiliser une mention valide pour l'ID.")
        return

    # Requ√™te API pour obtenir les informations de l'initiateur avec son ID
    url_initiator = f"https://unbelievaboat.com/api/v1/guilds/1161602328714023013/users/{initiator_id}"

    headers = {
        "accept": "application/json",
        "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfaWQiOiIxMzU4MDEwNTg0MDA3ODM4NDIzIiwiaWF0IjoxNzQzODQ1MzUzfQ.MVyA4OU4bgetYIB-T1aCajjJgEI2YTrcnV7owX38BlU"  # Remplace par ton token
    }

    # Envoi de la requ√™te pour l'initiateur
    response_initiator = requests.get(url_initiator, headers=headers)

    # Afficher les logs pour comprendre la r√©ponse
    print(f"R√©ponse pour l'initiateur: {response_initiator.status_code}")
    print(f"R√©ponse brute: {response_initiator.text}")

    # Si la r√©ponse est valide
    if response_initiator.status_code == 200:
        data_initiator = response_initiator.json()  # R√©cup√®re la r√©ponse au format JSON
        print("R√©ponse JSON de l'initiateur:", data_initiator)  # Affiche la r√©ponse JSON pour v√©rifier les cl√©s

        # Utilisation de 'total' pour repr√©senter la richesse totale de l'initiateur
        ton_cash = data_initiator.get('cash', 0)  # Utilise .get pour √©viter une erreur si la cl√© n'existe pas
        ta_richesse = data_initiator.get('total', 0)  # Utilise 'total' comme richesse totale

        # V√©rifie si les donn√©es sont pr√©sentes
       # if ton_cash == 0 or ta_richesse == 0:
        #    await interaction.response.send_message(f"Erreur : Impossible de r√©cup√©rer les informations n√©cessaires pour l'initiateur. D√©tails: Cash: {ton_cash}, Total: {ta_richesse}")
         #   return
    else:
        # Si la r√©ponse de l'API ne contient pas un statut 200 (succ√®s)
        await interaction.response.send_message(f"Erreur API pour l'initiateur. Code de statut: {response_initiator.status_code}")
        return

    # Requ√™te API pour obtenir les informations de la cible avec l'ID
    url_cible = f"https://unbelievaboat.com/api/v1/guilds/1161602328714023013/users/{cible_id}"
    response_cible = requests.get(url_cible, headers=headers)

    # Si la r√©ponse est valide
    if response_cible.status_code == 200:
        data_cible = response_cible.json()  # R√©cup√®re la r√©ponse au format JSON
        cash_cible = data_cible['cash']  # R√©cup√®re le cash de la cible
        cible_nom = data_cible['user_id']  # R√©cup√®re l'ID de l'utilisateur pour la cible (√† ajuster si tu veux un nom)

        X = cash_cible  # Richesse de la cible
        Y = ton_cash  # Ton cash
        Z = (Y / ta_richesse) * 100  # Probabilit√© d'√©chec calcul√©e avec ta richesse

        if Z < 20:
            proba = 20
            msg = "‚ùå Tu as **20%** de probabilit√© d'√©chec."
        elif Z > 80:
            proba = 80
            msg = "‚ùå Tu as **80%** de probabilit√© d'√©chec."
        else:
            proba = round(Z, 2)
            msg = f"üé≤ Tu as **{proba}%** de probabilit√© d'√©chec."

        # Calcul du gain estim√©
        gain = round(((100 - proba) * X) / 100, 2)

        # Calcul de la perte (20% de ton cash)
        perte = round(0.20 * ta_richesse, 2)  # Calcul bas√© sur ton cash

        embed = discord.Embed(title="üîê Simulation de Vol", color=0x3498db)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name="üéØ Cible", value=cible_mention, inline=True)
        embed.add_field(name="üíµ Cash de la Cible", value=f"{X:,}üí∞", inline=True)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name="üßç Ton cash", value=f"{Y:,}üí∞", inline=True)
        embed.add_field(name="üìä Ta richesse totale", value=f"{ta_richesse:,}üí∞", inline=True)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name="üé≤ Probabilit√© d'√©chec", value=msg, inline=False)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name="üí∞ Gain estim√©", value=f"{gain:,}üí∞", inline=False)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name="üí∏ Perte possible", value=f"{perte:,}üí∞", inline=False)  # Perte de 20% de ton cash

        await interaction.response.send_message(embed=embed)
    else:
        # Si l'API ne r√©pond pas correctement pour la cible
        await interaction.response.send_message("Erreur : Impossible de r√©cup√©rer les donn√©es de la cible.")


#     ELECTION



candidats = {}

@bot.tree.command(name="candidater", description="Devenir candidat √† l'√©lection")
@app_commands.describe(parti="Nom du parti", programme="Ton programme", slogan="Ton slogan (facultatif)")
async def candidater(interaction: Interaction, parti: str, programme: str, slogan: str = None):
    user_id = interaction.user.id
    if user_id in candidats:
        await interaction.response.send_message("‚ùå Tu es d√©j√† candidat.", ephemeral=True)
        return

    candidats[parti] = {
        "user": interaction.user,
        "programme": programme,
        "slogan": slogan or "Aucun slogan."
    }

    # Cr√©ation d'un embed pour afficher les informations de la candidature
    embed = discord.Embed(title="üì• Candidature enregistr√©e !", color=discord.Color.green())
    embed.add_field(name="üë§ Candidat", value=interaction.user.mention, inline=True)
    embed.add_field(name="üèõÔ∏è Parti", value=parti, inline=True)
    embed.add_field(name="üìú Programme", value=programme, inline=False)
    embed.add_field(name="üì£ Slogan", value=slogan or "Aucun slogan.", inline=False)

    await interaction.response.send_message(embed=embed, ephemeral=True)





# Stockage global
candidats = {}
votes = {}
user_id = 123456789012345678  # Remplace cette ID par l'ID de l'utilisateur auquel tu veux envoyer le message

class VoteButton(ui.Button):
    def __init__(self, label):
        super().__init__(label=label, style=discord.ButtonStyle.primary)

    async def callback(self, interaction: Interaction):
        # V√©rification si l'utilisateur a d√©j√† vot√©
        if interaction.user.id in votes:
            await interaction.response.send_message("‚ö†Ô∏è Tu as d√©j√† vot√© !", ephemeral=True)
            return

        # Enregistrement du vote
        votes[interaction.user.id] = self.label
        print(interaction.user.mention, 'a vot√© pour', self.label)

        # Envoi du message de confirmation √† l'utilisateur
        await interaction.response.send_message("‚úÖ Ton vote a bien √©t√© enregistr√© !", ephemeral=True)

        # Envoi du message priv√© √† l'administrateur ou √† un utilisateur sp√©cifique
        admin_user_id = 1149382861040926841  # Remplace ceci par l'ID Discord de l'administrateur ou de l'utilisateur
        admin_user = await interaction.client.fetch_user(admin_user_id)

        try:
            # Envoi d'un message priv√© √† l'administrateur pour notifier du vote
            await admin_user.send(f"üîî Un utilisateur a vot√© : {interaction.user.mention} a vot√© pour le parti {self.label}.")
        except discord.Forbidden:
            # Si l'administrateur ne peut pas recevoir de message priv√©
            await interaction.response.send_message("‚ùå Impossible d'envoyer un message priv√© √† l'administrateur.", ephemeral=True)


        

class VoteView(ui.View):
    def __init__(self, timeout: int):
        super().__init__(timeout=timeout)
        self.message = None  # Initialiser un attribut pour le message

    async def on_timeout(self):
        for item in self.children:
            item.disabled = True
        if self.message:
            await self.message.edit(content="‚è±Ô∏è Le vote est termin√© !", view=self)

        # Annonce des gagnants
        await self.annoncer_resultats()

    async def annoncer_resultats(self):
        if not votes:
            await self.message.channel.send("‚ùå Aucun vote enregistr√©.")
            return

        compteur = Counter(votes.values())

        # ‚õî Supprimer "Vote blanc" du classement principal s‚Äôil existe
        vote_blanc_count = compteur.pop("Vote blanc", 0)

        deux_mieux = compteur.most_common(2)

        embed = discord.Embed(
            title="üèÅ R√©sultats de l'√©lection üèÅ",
            color=discord.Color.green()
        )

        if deux_mieux:
            for i, (parti, count) in enumerate(deux_mieux, 1):
                embed.add_field(
                    name=f"{i}. Parti : {parti}",
                    value=f"Nombre de votes : {count}",
                    inline=False
                )
        else:
            embed.description = "‚ùå Aucun vote valide (hors vote blanc)."

        # ‚úÖ Afficher les votes blancs √† part
        if vote_blanc_count > 0:
            embed.add_field(
                name="üó≥Ô∏è Votes blancs",
                value=f"{vote_blanc_count} vote(s)",
                inline=False
            )

        if self.message:
            await self.message.channel.send(embed=embed)


    def add_candidate_buttons(self):
        for nom_parti in candidats:
            self.add_item(VoteButton(nom_parti))
        self.add_item(VoteButton("Vote blanc"))

# Dans la commande /election
@bot.tree.command(name="election", description="Lance une √©lection avec dur√©e en secondes.")
@app_commands.describe(duree="Dur√©e du vote en secondes")
async def start_election(interaction: Interaction, duree: int):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Tu dois √™tre administrateur pour lancer une √©lection.", ephemeral=True)
        return

    if not candidats:
        await interaction.response.send_message("‚ùå Aucun candidat inscrit.", ephemeral=True)
        return

    # Cr√©ation de l'embed pour la pr√©sentation des partis
    embed_partis = discord.Embed(title="üìä **Les partis candidats**", color=discord.Color.blue())

    for parti, info in candidats.items():
        embed_partis.add_field(
            name=f"üèõÔ∏è {parti}",
            value=f"üë§ {info['user'].mention}\nüìú {info['programme']}\nüì£ {info['slogan']}",
            inline=False
        )

    # Envoi du message des partis avec l'embed
    await interaction.channel.send(embed=embed_partis)

    # Cr√©ation de la vue avec les boutons pour voter
    view = VoteView(timeout=duree)
    view.add_candidate_buttons()

    # Envoi du message pour voter
    message = await interaction.channel.send("üó≥Ô∏è **√âlection ouverte !** Votez pour un parti :", view=view)
    view.message = message
    await interaction.response.send_message("‚úÖ √âlection lanc√©e.", ephemeral=True)


@bot.tree.command(name="reset", description="R√©initialise les candidats et les votes")
async def reset(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå Tu dois √™tre administrateur pour utiliser cette commande.", ephemeral=True)
        return

    candidats.clear()
    votes.clear()

    await interaction.response.send_message("‚ôªÔ∏è √âlection r√©initialis√©e. Tous les candidats et votes ont √©t√© supprim√©s.", ephemeral=False)





















# Charger les questions depuis un fichier JSON
def load_questions():
    with open('Question.json', 'r', encoding='utf-8') as f:
        questions = json.load(f)

questions = load_questions()

# Fonction pour r√©cup√©rer une question
def get_question():
    question_data = random.choice(questions)
    question = question_data["question"]
    correct_answer = question_data["correct_answer"]
    options = question_data["options"]
    random.shuffle(options)

    return question, options, correct_answer

# D√©finir la commande slash pour poser une question
@bot.tree.command(name="question", description="Pose une question de culture g√©n√©rale en fran√ßais.")
async def question(interaction: discord.Interaction):
    question, options, correct_answer = get_question()

    message_content = f"**Question**: {question}\n"
    for i, option in enumerate(options, 1):
        message_content += f"{i}. {option}\n"
    
    await interaction.response.send_message(message_content)
    
    def check(m):
        return m.author == interaction.user and m.content.isdigit() and int(m.content) in range(1, 5)

    try:
        response = await bot.wait_for('message', check=check, timeout=30)
        answer = options[int(response.content) - 1]
        
        if answer == correct_answer:
            await interaction.followup.send(f"Bravo ! {interaction.user.mention}, Tu as trouv√© la bonne r√©ponse: {correct_answer}.")
        else:
            await interaction.followup.send(f"Dommage ! La bonne r√©ponse √©tait: {correct_answer}.")
    except:
        await interaction.followup.send(f"Temps √©coul√© ! La bonne r√©ponse √©tait: {correct_answer}.")























# Lancer le serveur Flask
keep_alive()

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Connect√© en tant que {bot.user}")

# Lancer le bot
bot.run(TOKEN)




