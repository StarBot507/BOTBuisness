import discord
from discord.ext import commands
import logging
import os
import time
import asyncio
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()




# Token du bot
token = os.getenv('BOT_TOKEN')

# Classe personnalis√©e pour le bot Discord
class MonBot(commands.Bot):
    """Classe personnalis√©e pour le bot Discord."""
    async def setup_hook(self):
        extensions = [
            'Autre', 'Election', 'Travailler'
        ]

        for extension in extensions:
            try:
                await self.load_extension(f'cogs.{extension}')
                print(f"Extension {extension} charg√©e avec succ√®s.")
                # Introduire une pause entre chaque chargement pour diff√©rer
                await asyncio.sleep(1)  # D√©lai de 3 secondes
            except Exception as e:
                print(f"Erreur en chargeant {extension}: {e}")

intents = discord.Intents.all()
bot = MonBot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    """Action ex√©cut√©e une fois le bot pr√™t."""
    print(f"Connect√© en tant que {bot.user}")

    # Synchronisation des commandes diff√©r√©e avec gestion des erreurs
    try:
        await bot.tree.sync()
        print("Les commandes ont √©t√© synchronis√©es avec succ√®s.")
    except discord.errors.HTTPException as e:
        print(f"Erreur lors de la synchronisation : {e}")

    # Afficher les commandes disponibles
    for command in bot.tree.get_commands():
        print(f'- {command.name}')
        
@discord.app_commands.command(name="sync_module", description="Force la synchronisation des commandes d'un module sp√©cifique.")
async def sync_module(interaction: discord.Interaction, module: str):
    """
    Synchronise toutes les commandes d'un module sp√©cifique.
    :param interaction: L'interaction Discord.
    :param module: Nom du module √† synchroniser.
    """
    try:
        # Chargement du module (Cog) sp√©cifi√©
        await bot.load_extension(f'cogs.{module}')
        await bot.tree.sync()  # Force la synchronisation globale
        await interaction.response.send_message(f"üîÑ Le module **{module}** a √©t√© synchronis√© avec succ√®s‚ÄØ!", ephemeral=True)

    except commands.ExtensionAlreadyLoaded:
        await interaction.response.send_message(f"‚ö†Ô∏è Le module **{module}** est d√©j√† charg√©.", ephemeral=True)

    except commands.ExtensionNotFound:
        await interaction.response.send_message(f"‚ùå Le module **{module}** n'a pas √©t√© trouv√©. V√©rifiez le nom‚ÄØ!", ephemeral=True)

    except discord.errors.HTTPException as e:
        await interaction.response.send_message(f"‚ùå Erreur lors de la synchronisation : {e}.", ephemeral=True)



keep_alive()
# Ajout √† l'arbre de commandes
bot.tree.add_command(sync_module)


# Lancer le bot
bot.run(token)
